# 예외 처리
# ** 예외(Exception)
# - 프로그램을 개발하면서 예상하지 못한 상황
# ex) 사용자의 입력 오류
# - 예외처리를 사용하면 프로그램이 종료되지 않음
# 프로그램 -> 입력 오류 -> 프로그램 종료, 에러(예외처리가 없는 경우)
# 프로그램 -> 입력 오류 -> 예외 초리 -> 프로그램이 종료되지 않음
# 데이터베이스 또는 파일 시스템 사용할 때는 반드시 예외처리를 사용해야 함

# ** 예외 종류
# 1. 예측 가능한 예외
#    - 발생 여부를 개발자가 사전에 인지 가능한 경우 -> 예외 처리
# 2. 예측 불가능한 예외 - > 개발자가 해결 불가능
#    - 서버에서 데이터 받기 ( e.g. 카카오톡에서의 톡방 -> 카카오 서버 접근 -> 데이터 전달받음 -> 스마트폰 출력)
#    - 서버 화재발생 -> 서버 꺼짐

# ** 예외 기본문법
# try:
#   예외 발생 가능 코드
# except 예외 타입:
#   예외 발생시 실행되는 코드
# else:
#   예외가 발생하지 않았을 때 실행되는 코드
# finally:
#   예외에 상관없이 무조건 실행(자원 해제에 사용)

# 수강신청 -> 종합정보시스템(조대 서버) : 최대 2000명 동시접속(가정)
#   - 학생1 -> 수강신청 -> 종정시
#   학생1과 종정시간의 connect가 생김(2000명까지 가능)
#   수강신청 완료 -> 자원해제(connect 끊기)를 해줘야 함

# 정상실행 : try -> else -> finally
# 예외실행 : try -> except -> finally
# * else, finally 생략 가능
# * try ~ except 한 쌍

from urllib.request import urlopen, HTTPError

try:
    html = urlopen("http://www.naver.com")  # 정상동작, 예외발생 X(주소가 잘못되지 않은 경우)
except HTTPError as e:
    print(e)
else:
    print("No Error")
finally:
    print("자원해제")